_by Christophe Narbonne_

= Introduction =
Le Projet de groupe Time Table Easy proposé par SUPINFO est un défi que notre équipe semble avoir mené à bien. Nous avons commencé ce projet en nous réunissant dans une équipe de personnalités différentes et complémentaires. Commencer par faire une équipe nous a permis de ne pas délaisser de membres dans la phase des choix de départ.

= Choix technologiques =

La première version du sujet ne nous laissait pas nous poser cette question importante... Quels outils allons nous choisir? Ce choix fut notre première mission en temps qu'équipe et elle ne devait pas être négligée...

L'équipe étant dans l'ensemble assez ouverte sur le logiciel libre, nous avons pensé à beaucoup de technologies autres que celles initialement proposées. Pour choisir des technologies, nous avons pensé "Architecture".

Bien que le cahier des charges ne faisait pas mention de toute la problématique sécurité, il nous avait paru évident qu'il faudrait un minimum de travail pour sécuriser la base de données... Faire un utilisateur par étudiant dans la base de données aurait imposé de nombreuses vues pour restreindre les droits de lecture sur les évènements privés. Nous avions aussi pensé restreindre les accès aux données en n'accédant que par des procédure stockées SQL, mais nous nous doutions que nous ferions au final un service de type "Front End" utilisé comme interface entre la base de données et Internet.

Coté client, notre équipe de base était assez partagée en termes de plateforme favorite, nous avons alors songé à l'interopérabilité pour le développement et pour l'utilisation. Une possibilité qui avait retenu notre attention: un client en XUL (langage d'interfaces graphiques utilisée par Mozilla Firefox) avec un service web en PHP.

Le sujet proposait d'autres technologies et nous avons admis que SQL Server était déjà installé chez le client, le sujet suggérant que la base d'utilisateurs était presque exclusivement sous Windows... Ayant dans notre équipe deux personnes ayant une certaine expérience en .NET, et en tenant compte du fait que les technologies Microsoft, lorsqu'elles sont utilisées dans l'ensemble de la chaine de développement, sont très intéressantes et possèdent des outils qui assistent agréablement le développeur, nous nous sommes donc conformés au sujet. D'ailleurs le framework .NET 4, utilisé avec Visual Studio 2010, semblait posséder des nouveautés intéressantes pour notre développement.


= Ressources humaines =
== Présentation de membres ==
La répartition des tâches fonctionnelles a été assez naturelle dans l'équipe de départ. Voici la liste des membres et leurs points forts et faibles:


*Equipe de départ*

Romaric :
    * Expériences en développement web et en .NET (ASP.NET)
    * Pas de lacunes particulières
    * Calme, posé, bonne orthographe et compréhension
	
Romain : 
    * Expériences d'administrateur web
    * Pas d'attraits particuliers pour le C#
    * Efficace, synthétique, clair dans sa vision et son esprit
	
Jérémy :
    * Conaissance générale dans de nombreux domaines
    * Pas de lacunes notables
    * Serviable
	
Christophe : 
    * Expériences en Linq et en .NET
    * Peu de compétences en interfaces graphique et en SQL
    * Motivé, disponible

*Arrivé après la répartition des tâches*

Thomas :
    * Expériences en Python
    * Quelques lacunes en .NET
    * Ouvert à la critique, attentif

== Répartitions des tâches ==
Voici le modèle de départ des tâches du projet:
  * Configuration et design de la base de données: Romain
  * Service Web: Christophe
  * Interface Administration : Jérémy
  * Interface Calendrier : Romaric

Il n'y avait aucune hiérarchie explicite, mais deux points importants rendaient remarquable deux personnes. Romaric avait lu plusieurs fois le cahier des charges et le connaissait nettement mieux que les autres membres et Christophe animait un peu l'équipe et s'occupait de la mise en place et configuration des outils de collaboration.

Nous nous sommes donc naturellement attribué les rôles, suivant les compétentces et les attraits de chacun. De plus, Thomas s'est ajouté à nos effectifs avec une deuxième révision :

Breil Romaric :
  * Responsable du respect du cahier des charges
  * Contrôle calendrier
  * Contribution importante dans l'organisation de la base de données
  
Cheynet de Beaupré Romain :
  * Organisation de la base de données (avec Romaric)
  * Design et ergonomie de l'interface
  
Despax Thomas :
  * Import/export des fichiers iCalendar
  * Création du cache, qui est un relai entre l'interface graphique et le service web
  
Kornylo Jérémy :
  * Design et implémentation de l'interface d'administration (sauf la gestion des évènements)
  
Narbonne Christophe :
  * Animateur du projet, avec une bonne vision d'ensemble (le service web étant en contact avec tous les autres modules)
  * Implémentation du service WCF
  * Implémentation de la connexion client/serveur
  * Contribution importante à la gestion du cache (en aidant Thomas)
  * Mise en place et configuration des outils de développement
  
Puisque nous utilisions la plupart des technologies utilisées pour la première fois, nous n'avons pas pu estimer le temps requis par chaque tâche, ce qui nous a empêché toute planification précise (à l'aide d'un diagramme de Gantt). D'autant plus que deux remaniements majeurs dans la structure du projet ont été décidés durant la phase d'implémentation, après avoir estimé que le temps perdu serait compensé par une plus grande rapidité et flexibilité dans la suite du développement.

Nous avons en effet décidé de créer une nouvelle base de données, qui supprimait de nombreuses tables redondantes. Ceci a été possible uniquement grâce à la meilleure compréhension du cahier des charges à la suite d'un temps de développement. Cela a contraint à ré-écrire une grande partie du service web, qui était alors très avancé.

Le deuxième remaniement a été le déplacement de l'interface d'administration d'une fenêtre externe vers l'intérieur de la fenêtre principale, ce qui a obligé à remanier le code XAML.

Romain s'est ensuite occupé de la documentation de l'interface utilisateur et de la documentation de la base de données.

Romaric ayant certaines compétences dans le domaine, il aura relu l'intégralité de la documentation à la recherche d'éventuelles fautes de sens ou d'orthographe.

= Outils et moyens mis en place =
Cette partie prend une importance particulière du fait de la division Supinfo/Ingésup qui a littéralement scindé notre équipe, les heures allouées aux projets de groupe étant différentes selon le campus et ne nous permettant pas de travailler ensemble. Il fallait donc nécessairement centraliser la communication, et avoir un projet accessible pour tous nos membres afin de limiter ce problème.

==Centralisation du contenu==
Comme nous avons un goût pour le logiciel libre, cela nous a simplifié l'hébergement, beaucoup de sites permettant d'héberger ce type de logiciel. Nous avons choisi Google Code pour leur réputation de fiabilité et d'efficacité de leurs services (et car tout le monde dans notre groupe avait déjà un compte Google).

Ce service propose:
  * Système de gestion de révision (Subversion ou mercurial)
  * Wiki
  * Hébergement de fichiers
  * Bug tracker

Il était évident que nous devions utiliser un système de gestion de révision. Pour ce qui est de la question SVN / Mercurial, nous avons pensé que SVN serait plus simple pour les membres néophytes de notre équipe, mais lors de changements importants, les limites de Subversion se sont fait sentir, notamment en l'absance d'une bonne gestion des branche (ce qui aurait permis de travailler chacun sur sa partie sans risquer de casser la version présente dans le dépot central).

Le wiki s'est avéré un moyen logique de centraliser notre documentation.

L'hébergement de fichiers a permis, notamment à Romain, de soumettre des ressources sans passer par SVN, et donc sans le client SVN.

Comme nous sommes dans une petite équipe sans "béta testeurs" externes, nous n'avons pas utilisé le Bug tracker.

==Centralisation de la communication==
Pour la centralisation de la communication, nous avons utilisé différents outils, le wiki n'étant pas un moyen adapté car il ne possède pas de moyens efficaces de se tenir au courant des nouveautés.

Nous avons utilisé une Mailing List pour permettre de communiquer avec les membres du groupe sans changer leurs habitudes. Elle a été utilisée pour parler des points d'avancement important, pour fixer des deadlines, pour organiser des réunions, pour demander et soumettre des suggestions publiques à l'ensemble de l'équipe. Pour ce service, ayant déjà notre projet sur Google Code, nous avons utilisé "Google Groups" ce qui nous a d'ailleurs permis de ne pas avoir à recréer de compte.

Pour ce qui est du "débug rapide" et pour les demandes personnelles, nous avons également beaucoup utilisé la messagerie instantanée (Jabber, MSN).

Nous avons aussi mis en place un serveur Mumble (communications vocales par internet) qui a permis d'organiser des réunions quand nous ne pouvions pas nous réunir physiquement. Il a aussi été utilisé pendant le développement, pour communiquer plus rapidement qu'avec une messagerie instantannée. Le problème de cet outil était principalement que Jérémy, vivant dans une cité universitaire, ne pouvait s'y connecter à cause d'un filtrage réseau.

=Bilans Personnels=
Ces bilans ont étés écrits par chaque membres, qui peuvent ici exposer leurs remarques sur le déroulement du projet.

==Breil Romaric==
La première lecture du cahier des charges (la première version) m'a d'abord laissé sceptique sur la possibilité de mener ce projet à terme, d'autant plus qu'il était beaucoup moins clair que la version suivante. Cependant, après de nombreuses relectures et interprétations (une matinée entière), j'ai fini par avoir une vision claire de ce qui était attendu. La réunion Webex organisée peu après m'a conforté dans la plupart de mes choix, ainsi que la nouvelle version du cahier des charges.

J'ai d'abord été tenté par l'utilisation des technologies de Mozilla (XUL) pour réaliser une application qui me paraissait fortement orientée "service en ligne", avec un service réalisé en PHP, par exemple (utilisé par un client lourd). Cependant, nous nous sommes mis d'accord sur l'utilisation exclusive du framework .NET, devant les avantages fournis par son utilisation exclusive.

Une fois l'équipe formée, j'ai naturellement aidé à la compréhension du cahier des charges, ce qui a permis d'élaborer rapidement une première version de la base de données. Cependant, après de nombreux remaniements pour intégrer de nouvelles données (oubliées durant la conception initiale), j'ai très vite proposé de refaire la base de données, ce qui a été fait dès qu'un schéma plus élégant a été trouvé, bien qu'un peu tardivement.

Concernant l'affichage des plannings en XAML, mon développement s'est amélioré au fur et à mesure de mon appropriation de cette technologie, et peu de code initial reste encore dans le projet.

Je pense que la plus grande source de problèmes a été la séparation du groupe en deux, suite à l'ouverture de deux locaux en parallèle. Les personnes qui auraient dû être le plus suivies n'ont pas pu travailler efficacement, puisque les créneaux alloués au projet étaient incompatibles. Une part importante du travail a donc dû être réalisée par seulement trois membres sur cinq.

Malgrès ces contre-temps, le projet a été en grande partie mené à bien, et le programme respecte les contraintes imposées.

==Cheynet Romain==
==Despax Thomas==
==Kornylo Jérémy==
Lorsque j'ai découvert le projet de groupe proposé par Supinfo, j'ai tout d'abord été impressionné. Je n'avais alors qu'une très courte expérience dans le C#, acquise lors de mon entrée en troisième année, et la richesse du cahier des charges prévoyait un projet long, complet et peut être difficile.

Heureusement, j'avais déjà de bonnes bases générales en programmation, ce qui m'a permis de rapidement m'adapter au C# et de fournir des résultats fonctionnels. J'ai eu la chance de me retrouver dans une équipe sérieuse et motivée, et nous avons pu rapidement nous organiser pour réaliser un vrai travail d'équipe. C'est pour moi l'une des meilleures expériences de travail en équipe à laquelle j'ai pu participer.

Un des points clefs de notre travail d'équipe à été l'utilisation de SVN, qui m'était alors inconnu. J'ai pu découvrir ses atouts et faiblesses tout au long du développement, ce qui m'a permis d'évaluer globalement sa qualité en vue d'une réutilisation dans un projet ultérieur. 

Mon travail étant centré sur l'interface d'administration et sa communication avec le service WCF, j'ai souvent été amené à discuter avec Christophe du fonctionnement et des problèmes rencontrés entre la communication de nos deux parties. La modélisation de l'interface d'administration m'a également permis d'acquérir de bonnes bases en XAML qui me permettront par la suite de réaliser des interfaces orientées vers la simplicité d'utilisation et sur l'ergonomie.

==Narbonne Christophe==
Cette expérience fut riche pour moi. C'est la première fois que j'ai véritablement l'impression de coder en groupe, je me suis beaucoup impliqué dans ce projet. Du fait de ma motivation, en espérant pouvoir tirer le projet vers l'avant, j'ai proposé à l'équipe d'en prendre les rênes. Il n'y a pas eu d'oppositions. Ce projet a aussi été pour moi une de mes premières expériences de management. J'ai certainement commis des erreurs, il est parfois difficile de savoir si critiquer les autres va les faire avancer ou les démoraliser, si être prétentieux et arrogant vas motiver un esprit de défi ou démotiver, si guider de près une personne va l'aider à comprendre ou la rendre dépendante...

J'ai fait ce que sur le moment je pensais être le mieux et je n'ai pas vraiment les moyens de savoir ce qui aurait changé si j'avais fait différemment... J'ai eu la chance d'avoir une équipe qui accepte bien les critiques dans l'ensemble, même quand elles sont franches et tranchantes.

Sur le plan développement, je suis assez coutumier de Git, c'est la première fois que j'utilise vraiment SVN, j'ai été un peu déçu par son incapacité à comprendre les déplacements de fichiers, les suppressions/renommages de dossiers en un nom qui existait déjà...
WCF est très simple, j'ai trouvé l'outil très bon à un détail près : la configuration m'a pris un temps considérable. Avoir une authentification, ou un stockage de variables par session avec une session non sécurisée... Une vraie difficulté... J'ai du perdre quatre demi-journées pour avoir un fonctionnement qui me satisfasse vraiment. Maintenant que je l'ai fait, je pense que j'irai plus vite la prochaine fois.

Pour ce qui est du cache, du WPF, de la base de données, j'ai beaucoup appris même si j'ai certainement gardé mes lacunes en gestion d'interfaces graphique, pusique que je n'ai fait que la fenêtre de login.